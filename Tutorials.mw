*1. '''[http://obi-ontology.org/page/Tutorials#Checkout How to checkout OBI from SVN]''' 
*2. '''[http://obi-ontology.org/page/Tutorials#Sourceforge How to get sourceforge access] '''
*3. '''[http://obi-ontology.org/page/Tutorials#Reasoning How to reason with OBI]'''

<hr>

==Checkout==


A) Install latest Protege 3.4.X version from 
http://protege.stanford.edu/download/registered.html 

B) Install an svn client. For windows, we recommend 
http://tortoisesvn.tigris.org/ 

C) Using the svn client, check out 
http://obi.svn.sourceforge.net/svnroot/obi/trunk/src/ontology 
(If you want to commit changes back to the repository, you will need to use
https: instead of http:, and will need a sourceforge password for obi.)

D) Go to the directory: ontology\branches and remove the '.template' 
extension from the files obi.owl, obi.pprj, obi.repository

E) open the obi.pprj file in protege
(double clicking works on windows)

==Sourceforge==

1. First, you need to have a sourceforge.net account. If you do not have one, register at sourceforge: https://sourceforge.net/account/registration/ .

2. Second, email one of the OBI sourceforge administrators (e.g., Melanie) as seen in the OBI sourceforge site. Alternatively,  email the obi developer mailing list (obi-devel@lists.sourceforge.net). You will very likely be issued the right to access OBI sourceforge. This will allow you to make changes in OBI sourceforge.


<hr>

==Reasoning==

This document was originally a [http://docs.google.com/View?id=dzprnmw_71chch6pfk google doc]

''Authors: Melanie Courtot, [http://groups.google.com/group/obi-developer/browse_thread/thread/94292461fca2a907?hl=en# - Alan Ruttenberg's google group page'']

'''Step 1'''

 Load the kb and collect information. The take-sample function
takes a kb, a number of seconds for the reasoner to run, and the sort
key for presenting the results (one of "Time", "depth" (of the tree) ,
"size" (number of nodes)).



'''Step 2'''

(setq kb (load-kb-jena :obil))

Output should be: #<Pellet KB on file:///Users/mcourtot/Desktop/OBI/SVN/obi/trunk/src/ontology/branches/obil.owl>
Note: to use the above you need to set obil in lsw/trunk/owl/standard-ontologies.lisp

(take-sample kb 60 "Time")

It runs and prints out a sorted list of the classes that it had time
to check. Here is what it looks like now:

((("http://purl.obofoundry.org/obo/OBI_0000153"
  ("cell co-culturing"))
 ("depth" "18") ("size" "11882") ("Time" "7564"))
(("http://purl.obofoundry.org/obo/OBI_9999994"
  ("chromium release assay"))
 ("depth" "18") ("size" "10502") ("Time" "5538"))
(("http://purl.obofoundry.org/obo/OBI_0302851" ("fixed"))
 ("depth" "19") ("size" "8352") ("Time" "4025"))
(("http://purl.obofoundry.org/obo/OBI_0600021" ("cell fixation"))
 ("depth" "17") ("size" "7890") ("Time" "2344"))
(("http://purl.obofoundry.org/obo/OBI_0000264"
  ("sample population"))
 ("depth" "16") ("size" "5321") ("Time" "2080"))
(("http://msi-ontology.sourceforge.net/ontology/CHROM.owl#msi_01082"
  ("evaporative light scattering detector"))
 ("depth" "13") ("size" "1296") ("Time" "2051"))
(("http://purl.obofoundry.org/obo/OBI_0100064"
  ("screening library"))
 ("depth" "16") ("size" "4587") ("Time" "1603"))
(("http://purl.obofoundry.org/obo/OBI_0400023" ("CYFlow ML"))
 ("depth" "14") ("size" "6485") ("Time" "1542"))
(("http://purl.obofoundry.org/obo/OBI_0400005" ("A10-Analyzer"))
 ("depth" "14") ("size" "6485") ("Time" "1536"))
(("http://purl.obofoundry.org/obo/OBI_0400014" ("BioSorter1000"))
 ("depth" "14") ("size" "6493") ("Time" "1506"))
(("http://purl.obofoundry.org/obo/OBI_0400041" ("FACSvantage"))
 ("depth" "14") ("size" "6493") ("Time" "1493"))
(("http://purl.obofoundry.org/obo/OBI_0400055" ("inFlux Analyzer"))
 ("depth" "14") ("size" "6485") ("Time" "1484"))
....

You then pick off some culprit near the top, compute the tree, and
have a look at it.

(
INFO [Thread-4] (ABox.java:1541) - Consistency
http://purl.obofoundry.org/obo/OBI_0302851 for 0 individuals []
INFO [Thread-4] (ABox.java:1628) - Consistent: true Tree depth: 19
Tree size: 8352 Time: 2892
#<completion for consistency check of 'fixed' !obi:OBI_0302851 8352 nodes>

example output:
CL-USER> (setq a (check-entity-consistency !obi:OBI_0100010 kb t))
#<completion for consistency check of 'Epstein Barr virus transformed B cell' !obi:OBI_0100010 2499 nodes>

=> setq assigns to the variable a the value of the expression between parenthesis

The function:

(make-completion-graph a 5)

=> using the variable a that has been set up previously, a, give me the graph with a depth of 5

Draws a radial layout tree to depth 5. I find between 3 and 6 to be
tolerable values depending on how cluttered the result is.

http://docs.google.com/File?id=dzprnmw_72fjqqjfcp_b
<hr>

Each node is formatted as
"label:
class
class
class
..."

The label is either "Class:" for the focus class, or the name of the
relation of the parent individual to the node. The classes are a list
of the most specific named classes based on looking only at asserted
superclass relations.

As you mouse over, the node under your mouse is red, direct parents
and children are yellow. Clicking on node brings up an inspector that
lists all the class expressions that are assigned to the node. 

http://docs.google.com/File?id=dzprnmw_73g88dgnfd_b

You then look around for nonsense. Some nonsense are relations to
types of individuals that don't make sense in the context. For
instance, in the image I attached, it doesn't make sense that we are
seeing something about specified output data when we are describing a
quality. The focus class is "fixed" and it's definition is

quality_of some ('material entity'  and is_specified_output_of some
'cell fixation')

So the first two nodes out from "fixed" are first an instance of
quality, and second that cell fixation process. The fact that from
that cell fixation process there is has_specified_output_data: datum
means that we haven't said that processes such as cell fixation don't
output data.

Another pattern is one where we see a property and then it's inverse
immediately asserted (and again perhaps).  Picture 21, attached, shows
such a case of dueling is_specified_output_of/has_specified_output.
Poking around I think this is due to artifact object:
is_specified_output_of some 'artifact material creation' and

http://docs.google.com/File?id=dzprnmw_74gdn84cth_b

If we get rid of the axiom on artifact material creation and reload, we get:

(setq a  (check-entity-consistency !obi:OBI_0302851 kb t))
#<completion for consistency check of 'fixed' !obi:OBI_0302851 5980 nodes>

The tree is 1/3 smaller. Such a change will typically affect many
nodes, so you might see a surprising increase in reasoning speed for a
small change such as this.

Thus far the sorts of things I have been noticing are missing
disjoints, incorrectly broad ranges for properties, and these uses of
properties/inverse where we might be able to choose one direction and
stick with it.

In the shortest term, I think adding disjoints among the objective
specifications might help. I think I made those changes and saw effect
but I've been messing around with the files enough that I don't want
to save them and I don't have a good diff tool handy.
